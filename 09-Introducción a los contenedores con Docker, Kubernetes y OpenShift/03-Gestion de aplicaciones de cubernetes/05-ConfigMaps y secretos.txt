"Bienvenido a «ConfigMaps and Secrets». Después de ver este vídeo, podrá identificar las características importantes de ConfigMap, describir las capacidades de ConfigMap,
    describir tres formas de crear un ConfigMap y describir tres formas de crear un secreto.

Como desarrolladores de software, una buena práctica a adoptar es evitar codificar de forma rígida las variables de configuración en el código de la aplicación, manteniendo las
    variables de configuración separadas para que cualquier cambio en los ajustes de configuración no requiera cambios en el código.
Un ConfigMap es un objeto de API que almacena datos no confidenciales en pares clave-valor. Además, un mapa de configuración proporciona datos de configuración a los módulos y a
    las implementaciones para que los datos de configuración no estén codificados en el código de la aplicación y estén destinados a ser información no confidencial, ya que no
    proporcionan secreto ni cifrado. Los datos almacenados en un ConfigMap no pueden superar 1 megabyte.

Para cantidades de datos más grandes, considere la posibilidad de montar un volumen o utilizar una base de datos o un servicio de archivos independientes. Un ConfigMap tiene
    campos de datos y datos binarios opcionales. Y en este caso, no hay ningún campo de «especificaciones» en la plantilla y el nombre de configuración debe ser un nombre de
    subdominio DNS válido.

Un ConfigMap es reutilizable para varias implementaciones, ¡lo que desvincula el entorno de las propias implementaciones!
Puede crear un ConfigMap utilizando cadenas literales, utilizando un archivo existente de «propiedades» o «key» = «valor» o proporcionando un archivo descriptor YAML de
    ConfigMap. Puedes usar la primera y la segunda forma para ayudar a crear un archivo YAML de este tipo. La implementación o los pods consumen un ConfigMap mediante variables de
    entorno con el atributo configMapKeyRef o montan un archivo con el complemento volumes.

Kubernetes aplica el ConfigMap al pod o la implementación justo antes de ejecutar el pod o la implementación. Utilizará la variable de entorno directamente en el archivo YAML.
La variable de mensaje se usa en el archivo JavaScript como process.env.message. Aplica este descriptor de despliegue a nuestro despliegue y la aplicación mostrará la cadena
    «Hola del archivo de configuración». El resultado es excelente, pero el mensaje está codificado en el archivo descriptor. Cambiemos esta situación usando un ConfigMap.

La forma más sencilla de proporcionar un ConfigMap es proporcionar un par clave-valor en el comando create ConfigMap. Tras este primer paso, el segundo paso consiste en informar
    a nuestra implementación sobre la nueva variable MESSAGE y especificar su ubicación para recogerla. Para ello, añada una sección de entorno en el descriptor de despliegue,
    como se muestra, y utilice el atributo «valueFrom» para apuntar al ConfigMap creado en el primer paso.

En este caso, la implementación buscará una clave denominada MESSAGE en el ConfigMap denominada «my-config». Otra forma de añadir la variable MESSAGE al ConfigMap consiste en
    utilizar un archivo que contenga todas las variables de entorno en el formato «key=value». Este archivo es útil para añadir muchas variables en lugar de enumerarlas una por
    una en la línea de comandos. Este es un archivo con una sola tecla de MENSAJE y el valor «hello from the my.properties». Ahora puede crear el ConfigMap con la marca
    «--from-file». Observe que la clave es «my.properties» en la sección del descriptor de despliegue. Para usar el ConfigMap en el archivo server.js, consúltelo como
    «process.env.message.message». Usa el comando «describe» para obtener el resultado de YAML. A continuación, consulta la sección de entorno.

Si especificas un directorio con el indicador «--from-file», todo el directorio se carga en el ConfigMap. También puedes cargar un archivo específico con una clave utilizando el
    formato «--from-file=key=filename».

Por último, puedes usar un archivo YAML con el descriptor ConfigMap y aplicar ese archivo. En nuestro caso, hemos guardado el resultado de «kubectl get ConfigMap» como un
    archivo YAML llamado «my-config.yaml». El primer comando indica que no hay ningún ConfigMap con el que empezar. Aquí está creando el archivo ConfigMap.yaml. Ahora aplicará el
    archivo YAML a su clúster, que creará el ConfigMap. Anota el MENSAJE en la descripción del archivo ConfigMap. Al usar el archivo YAML obtendrás los mismos resultados que con
    los otros métodos.

Ahora, trabajar con un secreto es como trabajar con un ConfigMap. Primero, crea un secreto usando una cadena literal. A continuación, el comando GET verifica que se haya creado
    el secreto. Por último, para demostrar que nuestro secreto es realmente un secreto, utilice el comando DESCRIBE y compruebe que no ve ningún secreto escrito con el texto
    mostrado. Puedes imprimir el secreto en formato YAML. Verás que el valor está completamente codificado. Para usar el secreto, agrega otro entorno al descriptor de despliegue
    como se muestra y, a continuación, usa la clave de la aplicación haciendo referencia a la aplicación como «process.env.api_creds».

La captura de pantalla muestra el secreto junto con otras variables de entorno del archivo Node.js. Otra forma de usar la clave secreta en la aplicación es usar montajes por
    volumen. Crea el mismo secreto que hiciste anteriormente. En el archivo YAML del descriptor, usa un volumen para el secreto con el VolumeMount correspondiente. Cada
    contenedor del archivo descriptor tiene su propio VolumeMount, pero comparte el volumen. El secreto de api-creds está montado como un archivo en /etc/api/api-creds. La
    aplicación leerá y procesará el archivo para extraer el secreto.

En este vídeo, aprendió que puede usar un ConfigMap para proporcionar variables para su aplicación,
puede crear un ConfigMap mediante un literal de cadena, mediante un archivo de propiedades o mediante YAML,
puede usar un Secret para proporcionar información confidencial a su aplicación y puede crear un Secret mediante un literal de cadena, mediante variables de entorno o mediante
    montajes de volumen.
"