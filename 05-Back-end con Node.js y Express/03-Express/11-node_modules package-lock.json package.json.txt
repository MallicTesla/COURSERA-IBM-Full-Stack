"Bienvenido a Express Best Practices. Después de ver este vídeo, podrá para describir las convenciones de estructura de carpetas para crear una aplicación Express y unas API, e
    identificar las mejores prácticas que se siguen habitualmente para crear aplicaciones Express y marcos web de API como Ruby on Rails, .NET, y Django tienen estructuras de
    directorios necesarias para almacenar archivos.

Express no requiere un directorio predefinido estructura para sus aplicaciones. Sin embargo, definir una estructura de directorios en por adelantado suele ser una buena idea
    porque, a medida que crece el tamaño de la aplicación, puede sería difícil de mantener de otra manera. Las siguientes carpetas se utilizan convencionalmente para almacenar
    archivos. Dentro de la carpeta del proyecto se sugiere utilice los siguientes directorios: Node modules, config, models, routes , views y public. Vamos a describir el
    contenido de cada uno de estos carpetas a continuación.

La carpeta de módulos de nodos contiene los de la aplicación módulos y paquetes. Se crea automáticamente después de ejecutarse el comando «npm install». Se analiza el
    administrador de paquetes Node, o npm en otro vídeo.
La carpeta «config» debe contener la configuración archivos como la configuración de conexión a la base de datos, un archivo de variables de entorno y un archivo de credenciales
    que contenga la API claves para los servicios externos que utiliza la aplicación en desarrollo.
La carpeta «modelos» contiene los datos modelos para la aplicación. Los archivos especifican el tipo de almacén de datos, por ejemplo como relacionales o no relacionales, y se
    definen mediante una biblioteca de mapeo relacional de objetos (ORM).
La carpeta de rutas se usa para especificar todos los las rutas de las diferentes entidades en diferentes archivos. Debe tener un archivo para cada conjunto lógico de rutas,
    como un archivo para un tipo de recurso.
La carpeta de vistas contiene archivos de plantillas. Una plantilla escribe dinámicamente HTML, CSS y JavaScript para devolverlo al cliente. Este enfoque facilita la generación
    interfaces de usuario específicas para cada usuario.
La carpeta pública contendrá toda la estática contenido como imágenes, CSS y JavaScript. A menudo es útil tener una subcarpeta para cada tipo de contenido.

La carpeta del proyecto también debe contener algunos archivos: app.js, routes.js y package.json.
    El archivo app.js es la configuración principal archivo para su aplicación.
    Un archivo routes.js es una ubicación central para acceder a todas las rutas de la aplicación. Este archivo requiere o importa todos los archivos en la carpeta de rutas y,
        a continuación, los exporta como un único módulo que se importa a el archivo app.js. Esto ayuda a crear un único punto de entrada para todas las rutas de la aplicación.
    El archivo package.json contiene los metadatos se usa para administrar las dependencias del proyecto.

Al crear la estructura de carpetas para un API, es bastante similar a la carpeta del proyecto. No necesita las vistas ni las carpetas públicas. Por lo tanto, las carpetas
    deberían tener un aspecto parecido esto. Módulos de nodos, configuraciones , modelos y rutas. Y, a continuación, los siguientes archivos app.js , routes.js y package.json.
Cuando asigne un nombre a una ruta de API, asegúrese de utilizar un sustantivo como identificador de recurso. En esta tabla se proporcionan ejemplos de rutas HTTP para publicar,
    obtener, parchear y eliminar utilizando la palabra empleado en la ruta. Estas rutas son ejemplos si estás escribiendo Métodos HTTP y rutas de API para modificar los datos de
    los empleados. Asegúrese de utilizar correctamente los códigos de estado HTTP. Un código de 200 segundos significa que todo está bien, un código de 300 un código significa
    que el recurso se ha movido, un código de los 400 significa que ha habido un lado del cliente error, y un número entre 500 significa que algo salió mal en el lado de la API.

Otra práctica recomendada es realizar una prueba de caja negra tus API REST de node.js. Las pruebas de caja negra significan que usted prueba el código sin mirar su estructura
    interna. El sistema se prueba en su conjunto sin burlarse o dependencias bloqueadas.

Mocha, que es un marco de prueba de JavaScript que se ejecuta en Node.js, contiene un módulo simple llamado «supertest». SuperTest le proporciona una forma de realizar pruebas
    Solicitudes HTTP, que es exactamente lo que necesitas cuando quieres probar las API de REST en una caja negra. Y cuando tu API necesita autenticarse, es mejor práctica para
    usar un token web JSON o una autenticación sin estado basada en JWT. Dado que las API de REST deben ser apátridas, su la autenticación también tendrá que serlo.
La autenticación sin estado verifica a los usuarios mediante proporciona la mayoría de la información de la sesión, como las propiedades del usuario, en el lado del cliente.

Haremos hincapié en la última mejor práctica de la API aquí está la creación de la documentación de API adecuada. Todo el propósito de una API es que alguien otros pueden
    usarlos, por lo que querrás proporcionar la documentación adecuada para tu Node.js RESTO DE LA API. Dos proyectos de código abierto que puede encontrar API Blueprint es útil
    para crear documentación para sus API, que se puede encontrar en api blueprint dot org y Swagger, que se pueden encontrar en swagger dot I O.
Hay una serie de otros consejos útiles que se siguen ampliamente a la hora de crear una aplicación rápida de node.js.

Con respecto al uso del administrador de paquetes node, o NPM, utilice el comando npm init al inicializar un proyecto de node.js. Cuando utilice el comando npm install para
    instalar usa el atributo dash save o el atributo dash save dash dev. Esto asegura que si la aplicación es si se mueve a una plataforma diferente, se instalarán las
    dependencias correctas con ella.

Nunca envíes un repositorio de módulos de un nodo. Y usa siempre npm para instalar. Siga las siguientes convenciones de uso de mayúsculas. Use todo en minúscula para los nombres
    de los archivos, use minúsculas para las variables y los módulos npm se nombran en minúscula, separados con guiones. Y cuando se usa el método «require» para npm módulos,
    usa camel case.

En este vídeo, aprendiste a usar una estructura de directorios tanto en un archivo Express.js una aplicación y una API que incluye carpetas de configuración, modelos y rutas de
    módulos de nodos.
Mejores prácticas a la hora de desarrollar APIs RESTful incluyen: utilizar un sustantivo como identificador de recursos, utilizar correctamente los códigos de estado HTTP,
    probar las API de REST mediante SuperTest y utilizar la autenticación sin estado basada en JWT. e incluya buena documentación.
Finalmente, otros consejos incluyen: seguir las convenciones de uso de mayúsculas,
Usar npm como se recomienda y usar archivos de configuración para variables y grupos similares rutas en funcionamiento a sus propios archivos."